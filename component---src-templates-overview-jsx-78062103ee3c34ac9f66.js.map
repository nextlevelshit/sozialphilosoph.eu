{"version":3,"sources":["webpack:///./src/components/Back/Back.jsx","webpack:///./src/components/PostListItem/PostListItem.jsx","webpack:///./src/components/PostListing/PostListing.jsx","webpack:///./src/templates/overview.jsx"],"names":["goBack","window","history","back","showBackButton","className","type","onClick","PostListItem","props","wrapper","React","createRef","link","scrollIntoView","bind","e","this","current","getBoundingClientRect","top","preventDefault","setTimeout","click","render","path","title","bgColor","teaser","excerpt","image","slug","key","ref","id","to","style","color","Image","src","Component","defaultProps","PostListing","postList","map","post","i","isOdd","postEdges","forEach","fields","frontmatter","push","OverviewTemplate","state","isCollapsed","isCollapsable","container","toggleCollapse","componentDidMount","setState","isWrapperOverflown","clientHeight","data","pageContext","location","nodes","allMarkdownRemark","html","source","anchors","pageTitle","anchor","fromHeader","siteTitle","dangerouslySetInnerHTML","__html","showCategoryLinks"],"mappings":"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","file":"component---src-templates-overview-jsx-78062103ee3c34ac9f66.js","sourcesContent":["import React from 'react'\nimport { showBackButton } from '../../../data/SiteConfig'\nimport './Back.scss'\n\nconst goBack = () => {\n  if(window) {\n    window.history.back()\n  }\n}\n\nexport default () => (\n  (showBackButton && (\n    <div className=\"back-wrapper\">\n      <div className=\"container\">\n        <button type=\"button\" className=\"back\" onClick={goBack}>Â«</button>\n      </div>\n    </div>\n  ))\n)","import React from 'react'\nimport { Link } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport { kebabCase } from 'lodash'\nimport './PostListItem.scss'\nimport Image from '../Image/Image'\n\nclass PostListItem extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.wrapper = React.createRef()\n    this.link = React.createRef()\n    this.scrollIntoView = this.scrollIntoView.bind(this)\n  }\n\n  scrollIntoView(e) {\n    if(this.wrapper.current.getBoundingClientRect().top !== 0) {\n      e.preventDefault()\n      this.wrapper.current.scrollIntoView()\n      setTimeout(() => {\n        this.link.current.click()\n      }, 160)\n    }\n  }\n\n  render() {\n    const { path, title, bgColor, teaser, excerpt, image } = this.props\n    const slug = kebabCase(title)\n\n    return (\n      <section className=\"item\" key={path} ref={this.wrapper} id={slug}>\n        <Link to={path} ref={this.link} style={{ color: bgColor || `#000`}} className=\"container\" onClick={e => this.scrollIntoView(e)}>\n          <div className=\"content\">\n            <h2>{title}</h2>\n            {teaser && <div className=\"teaser\">{teaser}</div>}\n            <p className=\"excerpt\">{excerpt}</p>\n            <button type=\"button\">Read more &raquo;</button>\n          </div>\n          <div className=\"image\">\n            {image && <Image src={image} />}\n          </div>\n        </Link>\n      </section>\n    )\n  }\n}\n\nPostListItem.propTypes = {\n  bgColor: PropTypes.string,\n  image: PropTypes.string,\n  path: PropTypes.string.isRequired,\n  teaser: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  excerpt: PropTypes.string.isRequired\n}\n\nPostListItem.defaultProps = {\n  bgColor: ``,\n  image: ``,\n  teaser: ``,\n}\n\nexport default PostListItem\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport PostListItem from '../PostListItem/PostListItem' \n\nclass PostListing extends React.Component {\n  get postList() {\n    const postList = []\n    const { postEdges } = this.props\n\n    postEdges.forEach(({ fields, frontmatter, excerpt }) => {\n      const { image, title, bgColor, teaser } = frontmatter\n\n      // console.log(frontmatter)\n\n      postList.push({\n        path: fields.slug,\n        excerpt,\n        image,\n        title,\n        teaser,\n        bgColor\n      })\n    })\n    return postList\n  }\n\n  render() {\n    return (\n      <>\n        {this.postList.map((post, i) => (\n          <PostListItem {...post} isOdd={i % 2 !== 0} key={post.slug} />\n        ))}\n      </>\n    )\n  }\n}\n\nPostListing.propTypes = {\n  postEdges: PropTypes.arrayOf(\n    PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n        teaser: PropTypes.string,\n      }).isRequired,\n      fields: PropTypes.shape({\n        slug: PropTypes.string.isRequired,\n      }).isRequired,\n      excerpt: PropTypes.string.isRequired\n    })\n  ).isRequired,\n}\n\nexport default PostListing\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql, Link } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport { kebabCase } from 'lodash'\nimport Layout from '../layout/index'\nimport PostListing from '../components/PostListing/PostListing'\nimport Image from '../components/Image/Image'\nimport Back from '../components/Back/Back'\nimport { siteTitle, showCategoryLinks } from '../../data/SiteConfig'\n\nexport default class OverviewTemplate extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isCollapsed: true,\n      isCollapsable: false\n    }\n    this.wrapper = React.createRef()\n    this.container = React.createRef()\n    this.toggleCollapse = this.toggleCollapse.bind(this)\n  }\n\n  componentDidMount() {\n    this.setState(() => ({\n      isCollapsable: this.isWrapperOverflown()\n    }))\n  }\n\n  isWrapperOverflown() {\n    return this.wrapper.current.clientHeight < this.container.current.clientHeight\n  }\n\n  toggleCollapse() {\n    const { isCollapsed } = this.state\n\n    this.setState(() => ({\n      isCollapsed: !isCollapsed\n    }))\n\n    if (!isCollapsed) {\n      this.wrapper.current.scrollIntoView()\n    }\n  }\n\n  render() {\n    const { data, pageContext, location } = this.props\n    const { allMarkdownRemark } = data\n    const { nodes } = allMarkdownRemark\n    const { title, html, image, source, teaser, slug, bgColor } = pageContext\n    const { isCollapsed, isCollapsable } = this.state\n    const anchors = nodes.map(({ frontmatter }) => {\n      const { title: pageTitle } = frontmatter\n      const anchor = `${slug}#${kebabCase(pageTitle)}`\n      \n      return { pageTitle, anchor }\n    })\n\n    return (\n      <Layout fromHeader={(location.state) ? location.state.fromHeader : false}>\n        <Helmet title={`${title} | ${siteTitle}`} />\n        <section ref={this.wrapper} className={`overview ${isCollapsed ? `collapsed` : ``}`}>\n          <div ref={this.container} className=\"container\">\n            <div className=\"image\">\n              {image && <Image src={image} />}\n            </div>\n            <div className=\"content\">\n              <h1>{title}</h1>\n              {teaser && <div className=\"teaser\">{teaser}</div>}\n              <div dangerouslySetInnerHTML={{ __html: html }} />\n              {source && <div className=\"source\">{source}</div>} \n            </div>\n            <ul className=\"categories\">\n              {anchors.map(({ pageTitle, anchor}) => (\n                <li key={kebabCase(pageTitle)}>\n                  <Link to={anchor} className=\"button\" style={{ color: bgColor }}>\n                    {pageTitle}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n          {showCategoryLinks && (\n            <div className={`button-wrapper ${!isCollapsable ? `hidden`: ``}`}>\n              <div className=\"container\">\n                <button type=\"button\" onClick={this.toggleCollapse}>\n                  Read all \n                  {isCollapsed ? ` â¼` : ` â²`}\n                </button>\n              </div>\n            </div>\n          )}\n        </section>\n        <PostListing postEdges={nodes} />\n        <Back />\n      </Layout>\n    )\n  }\n}\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query OverviewQuery($slug: String!) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [fields___sort], order: ASC }\n      filter: { fields: { \n        slug: { regex: $slug }, \n        isIndex: { ne: true },\n        isActive: { eq: true }\n      } }\n    ) {\n      nodes {\n        excerpt(pruneLength: 300)\n        frontmatter {\n          title\n          bgColor\n          image\n          teaser\n        }\n        fields {\n          slug\n        }\n      }\n    }\n  }\n`\n\nOverviewTemplate.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      nodes: PropTypes.array.isRequired\n    }).isRequired,\n  }).isRequired,\n  pageContext: PropTypes.shape({\n    html: PropTypes.string.isRequired,\n    slug: PropTypes.string.isRequired,\n    sort: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    bgColor: PropTypes.string.isRequired,\n  }).isRequired,\n  location: PropTypes.shape({\n    state: PropTypes.shape({\n      fromHeader: PropTypes.bool\n    })\n  })\n}\n\nOverviewTemplate.defaultProps = {\n  location: {\n    state: {\n      fromHeader: false\n    }\n  }\n}"],"sourceRoot":""}